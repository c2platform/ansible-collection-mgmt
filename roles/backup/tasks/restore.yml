---
- name: Restore file
  stat:
    path: "/tmp/RESTORE"
  register: restore_file

- name: Fail restore without confirmation
  fail:
    msg: To perform the restore confirm it with touch /tmp/RESTORE
  when: backup_restore_confirm and not restore_file.stat.exists

- name: Tmp restore folders
  file:
    path: "{{ backup_restore[backup_restore_item]['tmp'] }}"
    state: directory
    mode: 0755

- name: Tmp restore home folders
  file:
    path: "{{  backup_restore[backup_restore_item]['tmp'] }}/home"
    state: directory
    mode: 0755
  when: backup_restore[backup_restore_item]['home_tar'] is defined

- name: Extract tar
  unarchive:
    src: "{{ backup_restore[backup_restore_item]['tar'] }}"
    remote_src: yes
    dest: "{{ backup_restore[backup_restore_item]['tmp'] }}"
  when: backup_restore[backup_restore_item]['tar'] is defined

- name: Stop service
  service:
    name: "{{ backup_restore[backup_restore_item]['stop_start_service'] }}"
    state: stopped
  when:
    backup_restore[backup_restore_item]['stop_start_service'] is defined

- include_tasks: "restore_db_{{ vars[backup_restore_item + '_database_type']|default('postgresql') }}.yml"
  when: backup_restore[backup_restore_item]['backup_restore_db']

- include_tasks: "restore_files.yml"
  when: backup_restore[backup_restore_item]['backup_restore_home']

- name: Mark restore performed
  lineinfile:
    dest: "{{ backup_restore[backup_restore_item]['restored-file'] }}"
    line: "{{ backup_restore[backup_restore_item]['backup-id'] }}"

- name: Delete tmp restore folders
  file:
    path: "{{ backup_restore[backup_restore_item]['tmp'] }}"
    state: absent

- name: Provision role after restore
  include_role:
    name: "{{ backup_restore[backup_restore_item]['role_after_restore']|default(backup_restore_item) }}"
  when: backup_restore[backup_restore_item]['role_after_restore']|default(True)
